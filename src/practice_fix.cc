#include <Geode/Geode.hpp>

#include <Geode/modify/PlayerObject.hpp>
#include <Geode/modify/CheckpointObject.hpp>
#include <Geode/modify/PlayLayer.hpp>

#include "common.hh"

namespace uv::practice_fix {
    checkpoint_data from_playerobject(PlayerObject *po) {
        checkpoint_data data;
        data.rotation = po->getRotation();
        data.m_mainLayer = po->m_mainLayer;
        data.m_wasTeleported = po->m_wasTeleported;
        data.m_fixGravityBug = po->m_fixGravityBug;
        data.m_reverseSync = po->m_reverseSync;
        data.m_yVelocityBeforeSlope = po->m_yVelocityBeforeSlope;
        data.m_dashX = po->m_dashX;
        data.m_dashY = po->m_dashY;
        data.m_dashAngle = po->m_dashAngle;
        data.m_dashStartTime = po->m_dashStartTime;
        data.m_dashRing = po->m_dashRing;
        data.m_slopeStartTime = po->m_slopeStartTime;
        data.m_justPlacedStreak = po->m_justPlacedStreak;
        data.m_maybeLastGroundObject = po->m_maybeLastGroundObject;
        data.m_collisionLogTop = po->m_collisionLogTop;
        data.m_collisionLogBottom = po->m_collisionLogBottom;
        data.m_collisionLogLeft = po->m_collisionLogLeft;
        data.m_collisionLogRight = po->m_collisionLogRight;
        data.m_lastCollisionBottom = po->m_lastCollisionBottom;
        data.m_lastCollisionTop = po->m_lastCollisionTop;
        data.m_lastCollisionLeft = po->m_lastCollisionLeft;
        data.m_lastCollisionRight = po->m_lastCollisionRight;
        data.m_unk50C = po->m_unk50C;
        data.m_unk510 = po->m_unk510;
        data.m_currentSlope2 = po->m_currentSlope2;
        data.m_preLastGroundObject = po->m_preLastGroundObject;
        data.m_slopeAngle = po->m_slopeAngle;
        data.m_slopeSlidingMaybeRotated = po->m_slopeSlidingMaybeRotated;
        data.m_quickCheckpointMode = po->m_quickCheckpointMode;
        data.m_collidedObject = po->m_collidedObject;
        data.m_lastGroundObject = po->m_lastGroundObject;
        data.m_collidingWithLeft = po->m_collidingWithLeft;
        data.m_collidingWithRight = po->m_collidingWithRight;
        data.m_maybeSavedPlayerFrame = po->m_maybeSavedPlayerFrame;
        data.m_scaleXRelated2 = po->m_scaleXRelated2;
        data.m_groundYVelocity = po->m_groundYVelocity;
        data.m_yVelocityRelated = po->m_yVelocityRelated;
        data.m_scaleXRelated3 = po->m_scaleXRelated3;
        data.m_scaleXRelated4 = po->m_scaleXRelated4;
        data.m_scaleXRelated5 = po->m_scaleXRelated5;
        data.m_isCollidingWithSlope = po->m_isCollidingWithSlope;
        data.m_dashFireSprite = po->m_dashFireSprite;
        data.m_isBallRotating = po->m_isBallRotating;
        data.m_unk669 = po->m_unk669;
        data.m_currentSlope3 = po->m_currentSlope3;
        data.m_currentSlope = po->m_currentSlope;
        data.unk_584 = po->unk_584;
        data.m_collidingWithSlopeId = po->m_collidingWithSlopeId;
        data.m_slopeFlipGravityRelated = po->m_slopeFlipGravityRelated;
        data.m_particleSystems = po->m_particleSystems;
        data.m_slopeAngleRadians = po->m_slopeAngleRadians;
        data.m_rotateObjectsRelated = po->m_rotateObjectsRelated;
        data.m_maybeRotatedObjectsMap = po->m_maybeRotatedObjectsMap;
        data.m_rotationSpeed = po->m_rotationSpeed;
        data.m_rotateSpeed = po->m_rotateSpeed;
        data.m_isRotating = po->m_isRotating;
        data.m_isBallRotating2 = po->m_isBallRotating2;
        data.m_hasGlow = po->m_hasGlow;
        data.m_isHidden = po->m_isHidden;
        data.m_ghostType = po->m_ghostType;
        data.m_ghostTrail = po->m_ghostTrail;
        data.m_iconSprite = po->m_iconSprite;
        data.m_iconSpriteSecondary = po->m_iconSpriteSecondary;
        data.m_iconSpriteWhitener = po->m_iconSpriteWhitener;
        data.m_iconGlow = po->m_iconGlow;
        data.m_vehicleSprite = po->m_vehicleSprite;
        data.m_vehicleSpriteSecondary = po->m_vehicleSpriteSecondary;
        data.m_birdVehicle = po->m_birdVehicle;
        data.m_vehicleSpriteWhitener = po->m_vehicleSpriteWhitener;
        data.m_vehicleGlow = po->m_vehicleGlow;
        data.m_swingFireMiddle = po->m_swingFireMiddle;
        data.m_swingFireBottom = po->m_swingFireBottom;
        data.m_swingFireTop = po->m_swingFireTop;
        data.m_dashSpritesContainer = po->m_dashSpritesContainer;
        data.m_regularTrail = po->m_regularTrail;
        data.m_shipStreak = po->m_shipStreak;
        data.m_waveTrail = po->m_waveTrail;
        data.m_speedMultiplier = po->m_speedMultiplier;
        data.m_yStart = po->m_yStart;
        data.m_gravity = po->m_gravity;
        data.m_trailingParticleLife = po->m_trailingParticleLife;
        data.m_unk648 = po->m_unk648;
        data.m_gameModeChangedTime = po->m_gameModeChangedTime;
        data.m_padRingRelated = po->m_padRingRelated;
        data.m_maybeReducedEffects = po->m_maybeReducedEffects;
        data.m_maybeIsFalling = po->m_maybeIsFalling;
        data.m_shouldTryPlacingCheckpoint = po->m_shouldTryPlacingCheckpoint;
        data.m_playEffects = po->m_playEffects;
        data.m_maybeCanRunIntoBlocks = po->m_maybeCanRunIntoBlocks;
        data.m_hasGroundParticles = po->m_hasGroundParticles;
        data.m_hasShipParticles = po->m_hasShipParticles;
        data.m_isOnGround3 = po->m_isOnGround3;
        data.m_checkpointTimeout = po->m_checkpointTimeout;
        data.m_lastCheckpointTime = po->m_lastCheckpointTime;
        data.m_lastJumpTime = po->m_lastJumpTime;
        data.m_lastFlipTime = po->m_lastFlipTime;
        data.m_flashTime = po->m_flashTime;
        data.m_flashRelated = po->m_flashRelated;
        data.m_flashRelated1 = po->m_flashRelated1;
        data.m_colorRelated2 = po->m_colorRelated2;
        data.m_flashRelated3 = po->m_flashRelated3;
        data.m_lastSpiderFlipTime = po->m_lastSpiderFlipTime;
        data.m_unkBool5 = po->m_unkBool5;
        data.m_maybeIsVehicleGlowing = po->m_maybeIsVehicleGlowing;
        data.m_switchWaveTrailColor = po->m_switchWaveTrailColor;
        data.m_practiceDeathEffect = po->m_practiceDeathEffect;
        data.m_accelerationOrSpeed = po->m_accelerationOrSpeed;
        data.m_snapDistance = po->m_snapDistance;
        data.m_ringJumpRelated = po->m_ringJumpRelated;
        data.m_ringRelatedSet = po->m_ringRelatedSet;
        data.m_objectSnappedTo = po->m_objectSnappedTo;
        data.m_pendingCheckpoint = po->m_pendingCheckpoint;
        data.m_onFlyCheckpointTries = po->m_onFlyCheckpointTries;
        data.m_robotSprite = po->m_robotSprite;
        data.m_spiderSprite = po->m_spiderSprite;
        data.m_maybeSpriteRelated = po->m_maybeSpriteRelated;
        data.m_playerGroundParticles = po->m_playerGroundParticles;
        data.m_trailingParticles = po->m_trailingParticles;
        data.m_shipClickParticles = po->m_shipClickParticles;
        data.m_vehicleGroundParticles = po->m_vehicleGroundParticles;
        data.m_ufoClickParticles = po->m_ufoClickParticles;
        data.m_robotBurstParticles = po->m_robotBurstParticles;
        data.m_dashParticles = po->m_dashParticles;
        data.m_swingBurstParticles1 = po->m_swingBurstParticles1;
        data.m_swingBurstParticles2 = po->m_swingBurstParticles2;
        data.m_useLandParticles0 = po->m_useLandParticles0;
        data.m_landParticles0 = po->m_landParticles0;
        data.m_landParticles1 = po->m_landParticles1;
        data.m_landParticlesAngle = po->m_landParticlesAngle;
        data.m_landParticleRelatedY = po->m_landParticleRelatedY;
        data.m_playerStreak = po->m_playerStreak;
        data.m_streakStrokeWidth = po->m_streakStrokeWidth;
        data.m_disableStreakTint = po->m_disableStreakTint;
        data.m_alwaysShowStreak = po->m_alwaysShowStreak;
        data.m_shipStreakType = po->m_shipStreakType;
        data.m_slopeRotation = po->m_slopeRotation;
        data.m_currentSlopeYVelocity = po->m_currentSlopeYVelocity;
        data.m_unk3d0 = po->m_unk3d0;
        data.m_blackOrbRelated = po->m_blackOrbRelated;
        data.m_unk3e0 = po->m_unk3e0;
        data.m_unk3e1 = po->m_unk3e1;
        data.m_isAccelerating = po->m_isAccelerating;
        data.m_isCurrentSlopeTop = po->m_isCurrentSlopeTop;
        data.m_collidedTopMinY = po->m_collidedTopMinY;
        data.m_collidedBottomMaxY = po->m_collidedBottomMaxY;
        data.m_collidedLeftMaxX = po->m_collidedLeftMaxX;
        data.m_collidedRightMinX = po->m_collidedRightMinX;
        data.m_fadeOutStreak = po->m_fadeOutStreak;
        data.m_canPlaceCheckpoint = po->m_canPlaceCheckpoint;
        data.m_colorRelated = po->m_colorRelated;
        data.m_secondColorRelated = po->m_secondColorRelated;
        data.m_hasCustomGlowColor = po->m_hasCustomGlowColor;
        data.m_glowColor = po->m_glowColor;
        data.m_maybeIsColliding = po->m_maybeIsColliding;
        data.m_jumpBuffered = po->m_jumpBuffered;
        data.m_stateRingJump = po->m_stateRingJump;
        data.m_wasJumpBuffered = po->m_wasJumpBuffered;
        data.m_wasRobotJump = po->m_wasRobotJump;
        data.m_stateJumpBuffered = po->m_stateJumpBuffered;
        data.m_stateRingJump2 = po->m_stateRingJump2;
        data.m_touchedRing = po->m_touchedRing;
        data.m_touchedCustomRing = po->m_touchedCustomRing;
        data.m_touchedGravityPortal = po->m_touchedGravityPortal;
        data.m_maybeTouchedBreakableBlock = po->m_maybeTouchedBreakableBlock;
        data.m_jumpRelatedAC2 = po->m_jumpRelatedAC2;
        data.m_touchedPad = po->m_touchedPad;
        data.m_yVelocity = po->m_yVelocity;
        data.m_fallSpeed = po->m_fallSpeed;
        data.m_isOnSlope = po->m_isOnSlope;
        data.m_wasOnSlope = po->m_wasOnSlope;
        data.m_slopeVelocity = po->m_slopeVelocity;
        data.m_maybeUpsideDownSlope = po->m_maybeUpsideDownSlope;
        data.m_isShip = po->m_isShip;
        data.m_isBird = po->m_isBird;
        data.m_isBall = po->m_isBall;
        data.m_isDart = po->m_isDart;
        data.m_isRobot = po->m_isRobot;
        data.m_isSpider = po->m_isSpider;
        data.m_isUpsideDown = po->m_isUpsideDown;
        data.m_isDead = po->m_isDead;
        data.m_isOnGround = po->m_isOnGround;
        data.m_isGoingLeft = po->m_isGoingLeft;
        data.m_isSideways = po->m_isSideways;
        data.m_isSwing = po->m_isSwing;
        data.m_reverseRelated = po->m_reverseRelated;
        data.m_maybeReverseSpeed = po->m_maybeReverseSpeed;
        data.m_maybeReverseAcceleration = po->m_maybeReverseAcceleration;
        data.m_xVelocityRelated2 = po->m_xVelocityRelated2;
        data.m_isDashing = po->m_isDashing;
        data.m_unk9e8 = po->m_unk9e8;
        data.m_groundObjectMaterial = po->m_groundObjectMaterial;
        data.m_vehicleSize = po->m_vehicleSize;
        data.m_playerSpeed = po->m_playerSpeed;
        data.m_shipRotation = po->m_shipRotation;
        data.m_lastPortalPos = po->m_lastPortalPos;
        data.m_unkUnused3 = po->m_unkUnused3;
        data.m_isOnGround2 = po->m_isOnGround2;
        data.m_lastLandTime = po->m_lastLandTime;
        data.m_platformerVelocityRelated = po->m_platformerVelocityRelated;
        data.m_maybeIsBoosted = po->m_maybeIsBoosted;
        data.m_scaleXRelatedTime = po->m_scaleXRelatedTime;
        data.m_decreaseBoostSlide = po->m_decreaseBoostSlide;
        data.m_unkA29 = po->m_unkA29;
        data.m_isLocked = po->m_isLocked;
        data.m_controlsDisabled = po->m_controlsDisabled;
        data.m_lastGroundedPos = po->m_lastGroundedPos;
        data.m_touchingRings = po->m_touchingRings;
        data.m_touchedRings = po->m_touchedRings;
        data.m_lastActivatedPortal = po->m_lastActivatedPortal;
        data.m_hasEverJumped = po->m_hasEverJumped;
        data.m_hasEverHitRing = po->m_hasEverHitRing;
        data.m_playerColor1 = po->m_playerColor1;
        data.m_playerColor2 = po->m_playerColor2;
        data.m_position = po->m_position;
        data.m_isSecondPlayer = po->m_isSecondPlayer;
        data.m_unkA99 = po->m_unkA99;
        data.m_totalTime = po->m_totalTime;
        data.m_isBeingSpawnedByDualPortal = po->m_isBeingSpawnedByDualPortal;
        data.m_unkAAC = po->m_unkAAC;
        data.m_unkAngle1 = po->m_unkAngle1;
        data.m_yVelocityRelated3 = po->m_yVelocityRelated3;
        data.m_defaultMiniIcon = po->m_defaultMiniIcon;
        data.m_swapColors = po->m_swapColors;
        data.m_switchDashFireColor = po->m_switchDashFireColor;
        data.m_followRelated = po->m_followRelated;
        data.m_playerFollowFloats = po->m_playerFollowFloats;
        data.m_unk838 = po->m_unk838;
        data.m_stateOnGround = po->m_stateOnGround;
        data.m_stateUnk = po->m_stateUnk;
        data.m_stateNoStickX = po->m_stateNoStickX;
        data.m_stateNoStickY = po->m_stateNoStickY;
        data.m_stateUnk2 = po->m_stateUnk2;
        data.m_stateBoostX = po->m_stateBoostX;
        data.m_stateBoostY = po->m_stateBoostY;
        data.m_maybeStateForce2 = po->m_maybeStateForce2;
        data.m_stateScale = po->m_stateScale;
        data.m_platformerXVelocity = po->m_platformerXVelocity;
        data.m_holdingRight = po->m_holdingRight;
        data.m_holdingLeft = po->m_holdingLeft;
        data.m_leftPressedFirst = po->m_leftPressedFirst;
        data.m_scaleXRelated = po->m_scaleXRelated;
        data.m_maybeHasStopped = po->m_maybeHasStopped;
        data.m_xVelocityRelated = po->m_xVelocityRelated;
        data.m_maybeGoingCorrectSlopeDirection = po->m_maybeGoingCorrectSlopeDirection;
        data.m_isSliding = po->m_isSliding;
        data.m_maybeSlopeForce = po->m_maybeSlopeForce;
        data.m_isOnIce = po->m_isOnIce;
        data.m_physDeltaRelated = po->m_physDeltaRelated;
        data.m_isOnGround4 = po->m_isOnGround4;
        data.m_maybeSlidingTime = po->m_maybeSlidingTime;
        data.m_maybeSlidingStartTime = po->m_maybeSlidingStartTime;
        data.m_changedDirectionsTime = po->m_changedDirectionsTime;
        data.m_slopeEndTime = po->m_slopeEndTime;
        data.m_isMoving = po->m_isMoving;
        data.m_platformerMovingLeft = po->m_platformerMovingLeft;
        data.m_platformerMovingRight = po->m_platformerMovingRight;
        data.m_isSlidingRight = po->m_isSlidingRight;
        data.m_maybeChangedDirectionAngle = po->m_maybeChangedDirectionAngle;
        data.m_unkUnused2 = po->m_unkUnused2;
        data.m_isPlatformer = po->m_isPlatformer;
        data.m_stateNoAutoJump = po->m_stateNoAutoJump;
        data.m_stateDartSlide = po->m_stateDartSlide;
        data.m_stateHitHead = po->m_stateHitHead;
        data.m_stateFlipGravity = po->m_stateFlipGravity;
        data.m_gravityMod = po->m_gravityMod;
        data.m_stateForce = po->m_stateForce;
        data.m_stateForceVector = po->m_stateForceVector;
        data.m_affectedByForces = po->m_affectedByForces;
        data.m_jumpPadRelated = po->m_jumpPadRelated;
        data.m_somethingPlayerSpeedTime = po->m_somethingPlayerSpeedTime;
        data.m_playerSpeedAC = po->m_playerSpeedAC;
        data.m_fixRobotJump = po->m_fixRobotJump;
        data.m_holdingButtons = po->m_holdingButtons;
        data.m_inputsLocked = po->m_inputsLocked;
        data.m_currentRobotAnimation = po->m_currentRobotAnimation;
        data.m_gv0123 = po->m_gv0123;
        data.m_iconRequestID = po->m_iconRequestID;
        data.m_robotBatchNode = po->m_robotBatchNode;
        data.m_spiderBatchNode = po->m_spiderBatchNode;
        data.m_unk958 = po->m_unk958;
        data.m_robotFire = po->m_robotFire;
        data.m_unkUnused = po->m_unkUnused;
        data.m_gameLayer = po->m_gameLayer;
        data.m_parentLayer = po->m_parentLayer;
        data.m_actionManager = po->m_actionManager;
        data.m_isOutOfBounds = po->m_isOutOfBounds;
        data.m_fallStartY = po->m_fallStartY;
        data.m_disablePlayerSqueeze = po->m_disablePlayerSqueeze;
        data.m_robotAnimation1Enabled = po->m_robotAnimation1Enabled;
        data.m_robotAnimation2Enabled = po->m_robotAnimation2Enabled;
        data.m_spiderAnimationEnabled = po->m_spiderAnimationEnabled;
        data.m_ignoreDamage = po->m_ignoreDamage;
        data.m_enable22Changes = po->m_enable22Changes;
        return data;
    }
    
    void restore_playerobject(PlayerObject *po, checkpoint_data data) {
        po->setRotation(data.rotation);
        po->m_mainLayer = data.m_mainLayer;
        po->m_wasTeleported = data.m_wasTeleported;
        po->m_fixGravityBug = data.m_fixGravityBug;
        po->m_reverseSync = data.m_reverseSync;
        po->m_yVelocityBeforeSlope = data.m_yVelocityBeforeSlope;
        po->m_dashX = data.m_dashX;
        po->m_dashY = data.m_dashY;
        po->m_dashAngle = data.m_dashAngle;
        po->m_dashStartTime = data.m_dashStartTime;
        po->m_dashRing = data.m_dashRing;
        po->m_slopeStartTime = data.m_slopeStartTime;
        po->m_justPlacedStreak = data.m_justPlacedStreak;
        po->m_maybeLastGroundObject = data.m_maybeLastGroundObject;
        po->m_collisionLogTop = data.m_collisionLogTop;
        po->m_collisionLogBottom = data.m_collisionLogBottom;
        po->m_collisionLogLeft = data.m_collisionLogLeft;
        po->m_collisionLogRight = data.m_collisionLogRight;
        po->m_lastCollisionBottom = data.m_lastCollisionBottom;
        po->m_lastCollisionTop = data.m_lastCollisionTop;
        po->m_lastCollisionLeft = data.m_lastCollisionLeft;
        po->m_lastCollisionRight = data.m_lastCollisionRight;
        po->m_unk50C = data.m_unk50C;
        po->m_unk510 = data.m_unk510;
        po->m_currentSlope2 = data.m_currentSlope2;
        po->m_preLastGroundObject = data.m_preLastGroundObject;
        po->m_slopeAngle = data.m_slopeAngle;
        po->m_slopeSlidingMaybeRotated = data.m_slopeSlidingMaybeRotated;
        po->m_quickCheckpointMode = data.m_quickCheckpointMode;
        po->m_collidedObject = data.m_collidedObject;
        po->m_lastGroundObject = data.m_lastGroundObject;
        po->m_collidingWithLeft = data.m_collidingWithLeft;
        po->m_collidingWithRight = data.m_collidingWithRight;
        po->m_maybeSavedPlayerFrame = data.m_maybeSavedPlayerFrame;
        po->m_scaleXRelated2 = data.m_scaleXRelated2;
        po->m_groundYVelocity = data.m_groundYVelocity;
        po->m_yVelocityRelated = data.m_yVelocityRelated;
        po->m_scaleXRelated3 = data.m_scaleXRelated3;
        po->m_scaleXRelated4 = data.m_scaleXRelated4;
        po->m_scaleXRelated5 = data.m_scaleXRelated5;
        po->m_isCollidingWithSlope = data.m_isCollidingWithSlope;
        po->m_dashFireSprite = data.m_dashFireSprite;
        po->m_isBallRotating = data.m_isBallRotating;
        po->m_unk669 = data.m_unk669;
        po->m_currentSlope3 = data.m_currentSlope3;
        po->m_currentSlope = data.m_currentSlope;
        po->unk_584 = data.unk_584;
        po->m_collidingWithSlopeId = data.m_collidingWithSlopeId;
        po->m_slopeFlipGravityRelated = data.m_slopeFlipGravityRelated;
        po->m_particleSystems = data.m_particleSystems;
        po->m_slopeAngleRadians = data.m_slopeAngleRadians;
        po->m_rotateObjectsRelated = data.m_rotateObjectsRelated;
        po->m_maybeRotatedObjectsMap = data.m_maybeRotatedObjectsMap;
        po->m_rotationSpeed = data.m_rotationSpeed;
        po->m_rotateSpeed = data.m_rotateSpeed;
        po->m_isRotating = data.m_isRotating;
        po->m_isBallRotating2 = data.m_isBallRotating2;
        po->m_hasGlow = data.m_hasGlow;
        po->m_isHidden = data.m_isHidden;
        po->m_ghostType = data.m_ghostType;
        po->m_ghostTrail = data.m_ghostTrail;
        po->m_iconSprite = data.m_iconSprite;
        po->m_iconSpriteSecondary = data.m_iconSpriteSecondary;
        po->m_iconSpriteWhitener = data.m_iconSpriteWhitener;
        po->m_iconGlow = data.m_iconGlow;
        po->m_vehicleSprite = data.m_vehicleSprite;
        po->m_vehicleSpriteSecondary = data.m_vehicleSpriteSecondary;
        po->m_birdVehicle = data.m_birdVehicle;
        po->m_vehicleSpriteWhitener = data.m_vehicleSpriteWhitener;
        po->m_vehicleGlow = data.m_vehicleGlow;
        po->m_swingFireMiddle = data.m_swingFireMiddle;
        po->m_swingFireBottom = data.m_swingFireBottom;
        po->m_swingFireTop = data.m_swingFireTop;
        po->m_dashSpritesContainer = data.m_dashSpritesContainer;
        po->m_regularTrail = data.m_regularTrail;
        po->m_shipStreak = data.m_shipStreak;
        po->m_waveTrail = data.m_waveTrail;
        po->m_speedMultiplier = data.m_speedMultiplier;
        po->m_yStart = data.m_yStart;
        po->m_gravity = data.m_gravity;
        po->m_trailingParticleLife = data.m_trailingParticleLife;
        po->m_unk648 = data.m_unk648;
        po->m_gameModeChangedTime = data.m_gameModeChangedTime;
        po->m_padRingRelated = data.m_padRingRelated;
        po->m_maybeReducedEffects = data.m_maybeReducedEffects;
        po->m_maybeIsFalling = data.m_maybeIsFalling;
        po->m_shouldTryPlacingCheckpoint = data.m_shouldTryPlacingCheckpoint;
        po->m_playEffects = data.m_playEffects;
        po->m_maybeCanRunIntoBlocks = data.m_maybeCanRunIntoBlocks;
        po->m_hasGroundParticles = data.m_hasGroundParticles;
        po->m_hasShipParticles = data.m_hasShipParticles;
        po->m_isOnGround3 = data.m_isOnGround3;
        po->m_checkpointTimeout = data.m_checkpointTimeout;
        po->m_lastCheckpointTime = data.m_lastCheckpointTime;
        po->m_lastJumpTime = data.m_lastJumpTime;
        po->m_lastFlipTime = data.m_lastFlipTime;
        po->m_flashTime = data.m_flashTime;
        po->m_flashRelated = data.m_flashRelated;
        po->m_flashRelated1 = data.m_flashRelated1;
        po->m_colorRelated2 = data.m_colorRelated2;
        po->m_flashRelated3 = data.m_flashRelated3;
        po->m_lastSpiderFlipTime = data.m_lastSpiderFlipTime;
        po->m_unkBool5 = data.m_unkBool5;
        po->m_maybeIsVehicleGlowing = data.m_maybeIsVehicleGlowing;
        po->m_switchWaveTrailColor = data.m_switchWaveTrailColor;
        po->m_practiceDeathEffect = data.m_practiceDeathEffect;
        po->m_accelerationOrSpeed = data.m_accelerationOrSpeed;
        po->m_snapDistance = data.m_snapDistance;
        po->m_ringJumpRelated = data.m_ringJumpRelated;
        po->m_ringRelatedSet = data.m_ringRelatedSet;
        po->m_objectSnappedTo = data.m_objectSnappedTo;
        po->m_pendingCheckpoint = data.m_pendingCheckpoint;
        po->m_onFlyCheckpointTries = data.m_onFlyCheckpointTries;
        po->m_robotSprite = data.m_robotSprite;
        po->m_spiderSprite = data.m_spiderSprite;
        po->m_maybeSpriteRelated = data.m_maybeSpriteRelated;
        po->m_playerGroundParticles = data.m_playerGroundParticles;
        po->m_trailingParticles = data.m_trailingParticles;
        po->m_shipClickParticles = data.m_shipClickParticles;
        po->m_vehicleGroundParticles = data.m_vehicleGroundParticles;
        po->m_ufoClickParticles = data.m_ufoClickParticles;
        po->m_robotBurstParticles = data.m_robotBurstParticles;
        po->m_dashParticles = data.m_dashParticles;
        po->m_swingBurstParticles1 = data.m_swingBurstParticles1;
        po->m_swingBurstParticles2 = data.m_swingBurstParticles2;
        po->m_useLandParticles0 = data.m_useLandParticles0;
        po->m_landParticles0 = data.m_landParticles0;
        po->m_landParticles1 = data.m_landParticles1;
        po->m_landParticlesAngle = data.m_landParticlesAngle;
        po->m_landParticleRelatedY = data.m_landParticleRelatedY;
        po->m_playerStreak = data.m_playerStreak;
        po->m_streakStrokeWidth = data.m_streakStrokeWidth;
        po->m_disableStreakTint = data.m_disableStreakTint;
        po->m_alwaysShowStreak = data.m_alwaysShowStreak;
        po->m_shipStreakType = data.m_shipStreakType;
        po->m_slopeRotation = data.m_slopeRotation;
        po->m_currentSlopeYVelocity = data.m_currentSlopeYVelocity;
        po->m_unk3d0 = data.m_unk3d0;
        po->m_blackOrbRelated = data.m_blackOrbRelated;
        po->m_unk3e0 = data.m_unk3e0;
        po->m_unk3e1 = data.m_unk3e1;
        po->m_isAccelerating = data.m_isAccelerating;
        po->m_isCurrentSlopeTop = data.m_isCurrentSlopeTop;
        po->m_collidedTopMinY = data.m_collidedTopMinY;
        po->m_collidedBottomMaxY = data.m_collidedBottomMaxY;
        po->m_collidedLeftMaxX = data.m_collidedLeftMaxX;
        po->m_collidedRightMinX = data.m_collidedRightMinX;
        po->m_fadeOutStreak = data.m_fadeOutStreak;
        po->m_canPlaceCheckpoint = data.m_canPlaceCheckpoint;
        po->m_colorRelated = data.m_colorRelated;
        po->m_secondColorRelated = data.m_secondColorRelated;
        po->m_hasCustomGlowColor = data.m_hasCustomGlowColor;
        po->m_glowColor = data.m_glowColor;
        po->m_maybeIsColliding = data.m_maybeIsColliding;
        po->m_jumpBuffered = data.m_jumpBuffered;
        po->m_stateRingJump = data.m_stateRingJump;
        po->m_wasJumpBuffered = data.m_wasJumpBuffered;
        po->m_wasRobotJump = data.m_wasRobotJump;
        po->m_stateJumpBuffered = data.m_stateJumpBuffered;
        po->m_stateRingJump2 = data.m_stateRingJump2;
        po->m_touchedRing = data.m_touchedRing;
        po->m_touchedCustomRing = data.m_touchedCustomRing;
        po->m_touchedGravityPortal = data.m_touchedGravityPortal;
        po->m_maybeTouchedBreakableBlock = data.m_maybeTouchedBreakableBlock;
        po->m_jumpRelatedAC2 = data.m_jumpRelatedAC2;
        po->m_touchedPad = data.m_touchedPad;
        po->m_yVelocity = data.m_yVelocity;
        po->m_fallSpeed = data.m_fallSpeed;
        po->m_isOnSlope = data.m_isOnSlope;
        po->m_wasOnSlope = data.m_wasOnSlope;
        po->m_slopeVelocity = data.m_slopeVelocity;
        po->m_maybeUpsideDownSlope = data.m_maybeUpsideDownSlope;
        po->m_isShip = data.m_isShip;
        po->m_isBird = data.m_isBird;
        po->m_isBall = data.m_isBall;
        po->m_isDart = data.m_isDart;
        po->m_isRobot = data.m_isRobot;
        po->m_isSpider = data.m_isSpider;
        po->m_isUpsideDown = data.m_isUpsideDown;
        po->m_isDead = data.m_isDead;
        po->m_isOnGround = data.m_isOnGround;
        po->m_isGoingLeft = data.m_isGoingLeft;
        po->m_isSideways = data.m_isSideways;
        po->m_isSwing = data.m_isSwing;
        po->m_reverseRelated = data.m_reverseRelated;
        po->m_maybeReverseSpeed = data.m_maybeReverseSpeed;
        po->m_maybeReverseAcceleration = data.m_maybeReverseAcceleration;
        po->m_xVelocityRelated2 = data.m_xVelocityRelated2;
        po->m_isDashing = data.m_isDashing;
        po->m_unk9e8 = data.m_unk9e8;
        po->m_groundObjectMaterial = data.m_groundObjectMaterial;
        po->m_vehicleSize = data.m_vehicleSize;
        po->m_playerSpeed = data.m_playerSpeed;
        po->m_shipRotation = data.m_shipRotation;
        po->m_lastPortalPos = data.m_lastPortalPos;
        po->m_unkUnused3 = data.m_unkUnused3;
        po->m_isOnGround2 = data.m_isOnGround2;
        po->m_lastLandTime = data.m_lastLandTime;
        po->m_platformerVelocityRelated = data.m_platformerVelocityRelated;
        po->m_maybeIsBoosted = data.m_maybeIsBoosted;
        po->m_scaleXRelatedTime = data.m_scaleXRelatedTime;
        po->m_decreaseBoostSlide = data.m_decreaseBoostSlide;
        po->m_unkA29 = data.m_unkA29;
        po->m_isLocked = data.m_isLocked;
        po->m_controlsDisabled = data.m_controlsDisabled;
        po->m_lastGroundedPos = data.m_lastGroundedPos;
        po->m_touchingRings = data.m_touchingRings;
        po->m_touchedRings = data.m_touchedRings;
        po->m_lastActivatedPortal = data.m_lastActivatedPortal;
        po->m_hasEverJumped = data.m_hasEverJumped;
        po->m_hasEverHitRing = data.m_hasEverHitRing;
        po->m_playerColor1 = data.m_playerColor1;
        po->m_playerColor2 = data.m_playerColor2;
        po->m_position = data.m_position;
        po->m_isSecondPlayer = data.m_isSecondPlayer;
        po->m_unkA99 = data.m_unkA99;
        po->m_totalTime = data.m_totalTime;
        po->m_isBeingSpawnedByDualPortal = data.m_isBeingSpawnedByDualPortal;
        po->m_unkAAC = data.m_unkAAC;
        po->m_unkAngle1 = data.m_unkAngle1;
        po->m_yVelocityRelated3 = data.m_yVelocityRelated3;
        po->m_defaultMiniIcon = data.m_defaultMiniIcon;
        po->m_swapColors = data.m_swapColors;
        po->m_switchDashFireColor = data.m_switchDashFireColor;
        po->m_followRelated = data.m_followRelated;
        po->m_playerFollowFloats = data.m_playerFollowFloats;
        po->m_unk838 = data.m_unk838;
        po->m_stateOnGround = data.m_stateOnGround;
        po->m_stateUnk = data.m_stateUnk;
        po->m_stateNoStickX = data.m_stateNoStickX;
        po->m_stateNoStickY = data.m_stateNoStickY;
        po->m_stateUnk2 = data.m_stateUnk2;
        po->m_stateBoostX = data.m_stateBoostX;
        po->m_stateBoostY = data.m_stateBoostY;
        po->m_maybeStateForce2 = data.m_maybeStateForce2;
        po->m_stateScale = data.m_stateScale;
        po->m_platformerXVelocity = data.m_platformerXVelocity;
        po->m_holdingRight = data.m_holdingRight;
        po->m_holdingLeft = data.m_holdingLeft;
        po->m_leftPressedFirst = data.m_leftPressedFirst;
        po->m_scaleXRelated = data.m_scaleXRelated;
        po->m_maybeHasStopped = data.m_maybeHasStopped;
        po->m_xVelocityRelated = data.m_xVelocityRelated;
        po->m_maybeGoingCorrectSlopeDirection = data.m_maybeGoingCorrectSlopeDirection;
        po->m_isSliding = data.m_isSliding;
        po->m_maybeSlopeForce = data.m_maybeSlopeForce;
        po->m_isOnIce = data.m_isOnIce;
        po->m_physDeltaRelated = data.m_physDeltaRelated;
        po->m_isOnGround4 = data.m_isOnGround4;
        po->m_maybeSlidingTime = data.m_maybeSlidingTime;
        po->m_maybeSlidingStartTime = data.m_maybeSlidingStartTime;
        po->m_changedDirectionsTime = data.m_changedDirectionsTime;
        po->m_slopeEndTime = data.m_slopeEndTime;
        po->m_isMoving = data.m_isMoving;
        po->m_platformerMovingLeft = data.m_platformerMovingLeft;
        po->m_platformerMovingRight = data.m_platformerMovingRight;
        po->m_isSlidingRight = data.m_isSlidingRight;
        po->m_maybeChangedDirectionAngle = data.m_maybeChangedDirectionAngle;
        po->m_unkUnused2 = data.m_unkUnused2;
        po->m_isPlatformer = data.m_isPlatformer;
        po->m_stateNoAutoJump = data.m_stateNoAutoJump;
        po->m_stateDartSlide = data.m_stateDartSlide;
        po->m_stateHitHead = data.m_stateHitHead;
        po->m_stateFlipGravity = data.m_stateFlipGravity;
        po->m_gravityMod = data.m_gravityMod;
        po->m_stateForce = data.m_stateForce;
        po->m_stateForceVector = data.m_stateForceVector;
        po->m_affectedByForces = data.m_affectedByForces;
        po->m_jumpPadRelated = data.m_jumpPadRelated;
        po->m_somethingPlayerSpeedTime = data.m_somethingPlayerSpeedTime;
        po->m_playerSpeedAC = data.m_playerSpeedAC;
        po->m_fixRobotJump = data.m_fixRobotJump;
        po->m_holdingButtons = data.m_holdingButtons;
        po->m_inputsLocked = data.m_inputsLocked;
        po->m_currentRobotAnimation = data.m_currentRobotAnimation;
        po->m_gv0123 = data.m_gv0123;
        po->m_iconRequestID = data.m_iconRequestID;
        po->m_robotBatchNode = data.m_robotBatchNode;
        po->m_spiderBatchNode = data.m_spiderBatchNode;
        po->m_unk958 = data.m_unk958;
        po->m_robotFire = data.m_robotFire;
        po->m_unkUnused = data.m_unkUnused;
        po->m_gameLayer = data.m_gameLayer;
        po->m_parentLayer = data.m_parentLayer;
        po->m_actionManager = data.m_actionManager;
        po->m_isOutOfBounds = data.m_isOutOfBounds;
        po->m_fallStartY = data.m_fallStartY;
        po->m_disablePlayerSqueeze = data.m_disablePlayerSqueeze;
        po->m_robotAnimation1Enabled = data.m_robotAnimation1Enabled;
        po->m_robotAnimation2Enabled = data.m_robotAnimation2Enabled;
        po->m_spiderAnimationEnabled = data.m_spiderAnimationEnabled;
        po->m_ignoreDamage = data.m_ignoreDamage;
        po->m_enable22Changes = data.m_enable22Changes;
    }
}

static bool override_rotation = false;

// Funky GD physics lmao
// Thanks ChatGPT

class $modify(PlayerObject) {
    void updateRotation(float p0) {
        float old_rotation = this->getRotation();
        
        PlayerObject::updateRotation(p0);
        
        if (override_rotation) {
            override_rotation = false;
            this->setRotation(old_rotation);
        }
    }
};

class $modify(HookedCheckpointObject, CheckpointObject) {
    struct Fields {
        uv::practice_fix::checkpoint_data p1, p2;
    };

    bool init(void) {
        //  | This one byte of code just cost me an hour of painful debugging
        //  v I will never get that time back
        if (!CheckpointObject::init()) return false;
        
        PlayLayer *pl = PlayLayer::get();

        if (pl) {
            m_fields->p1 = uv::practice_fix::from_playerobject(pl->m_player1);
            if (pl->m_player2) m_fields->p2 = uv::practice_fix::from_playerobject(pl->m_player2);
        }
        
        return true;
    }
};

class $modify(PlayLayer) {
    void loadFromCheckpoint(CheckpointObject *cp) {
        PlayLayer::loadFromCheckpoint(cp);

        if (uv::hacks::get<bool>("practice-fix", true)) {
            uv::practice_fix::restore_playerobject(this->m_player1, static_cast<HookedCheckpointObject*>(cp)->m_fields->p1);
            if (this->m_player2) uv::practice_fix::restore_playerobject(this->m_player2, static_cast<HookedCheckpointObject*>(cp)->m_fields->p2);
            override_rotation = true;
        }
    }
};
